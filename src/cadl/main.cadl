import "@cadl-lang/rest";
import "@cadl-lang/openapi";

using Cadl.Http;
using OpenAPI;

@service(
  {
    title: "Inventory Service",
    version: "0.0.2",
  }
)

namespace IstMock;

@summary("Valid Environments")
enum EnvironmentEnum {
  "dev",
  "test",
  "prod",
}

@summary("Repository Pointer")
model Repo {
  @key
  @summary("Repository URL")
  url: string;

  @summary("Repository Name")
  name: string;

  @summary("Username")
  user: string;

  @summary("Pointer to key vault (not actual PAT)")
  pat: string;
}

@summary("Capacity")
model Capacity {
  memoryLimit: int32;
  cpuLimit: int32;
  gpuType?: string;
  gpuCount?: int32;
}

@summary("Base object with common properties")
model BaseIstObject {
  @key
  @summary("Object Id")
  id: string;

  @summary("Object Name")
  name: string;

  @summary("Object Metadata")
  metadata: Record<string>;

  @summary("Object Tags")
  tags: string[];

  @summary("Object Environment")
  environment: string;
}

@summary("Cluster Object")
model Cluster extends BaseIstObject {
  @summary("Cluster Capacity")
  capacity: Capacity;
}

@summary("Group Object")
model Group extends BaseIstObject {
  @summary("List of cluster Ids")
  clusters?: string[];

  @summary("List of subgroup Ids")
  subGroups?: string[];
}

@summary("Namespace Object")
model Namespace extends BaseIstObject {
  @summary("Namespace Capacity")
  capacity: Capacity;

  @summary("Namespace Policies")
  @doc("Every namespace has the same policies.")
  policies?: string[];

  @summary("Union of transitive closures")
  @doc("Temporary attribute as we will find a more expressive term later.")
  groups?: string[];
}

@summary("Application Object")
model Application extends BaseIstObject {
  @summary("Id of Namespace where Application is deployed")
  namespaceId: string;

  @summary("Pointer to Application repository")
  repo: Repo;

  @summary("Directory path that contains app.yaml")
  @doc("Read-only field as this will be auto-generated by the inventory.")
  path: string;

  @summary("Application Capacity")
  capacity: Capacity;
}

@summary("Policy")
model Policy {
  @key
  @summary("Policy Id")
  id: string;

  @summary("Policy Name")
  name: string;

  @summary("Pointer to policy path in repository")
  path: string;
}

@tag("Clusters")
interface Clusters {
  @summary("Get Clusters based on optional filter")
  @route("/api/v1/clusters")
  @operationId("GetClusters")
  @get list(): Cluster[];

  @summary("Create Cluster")
  @route("/api/v1/clusters")
  @operationId("CreateCluster")
  @post create(@body cluster: Cluster): CreatedResponse | BadRequestResponse;

  @summary("Get Cluster by Id")
  @route("/api/v1/clusters/{id}")
  @operationId("GetClusterById")
  @get read(@path id: string): Cluster | NotFoundResponse;

  @summary("Update Cluster")
  @route("/api/v1/clusters/{id}")
  @operationId("UpdateCluster")
  @doc("Id in URI must match Id in body.")
  @put put(@path id: string, @body cluster: Cluster): CreatedResponse | NoContentResponse | BadRequestResponse;

  @summary("Delete Cluster")
  @route("/api/v1/clusters/{id}")
  @operationId("DeleteCluster")
  @delete delete(@path id: string): NoContentResponse;
}

@tag("Groups")
interface Groups {
  @summary("Get Groups based on optional filter")
  @route("/api/v1/groups")
  @operationId("GetGroups")
  @get list(): Group[];

  @summary("Create Group")
  @route("/api/v1/groups")
  @operationId("CreateGroup")
  @post create(@body group: Group): CreatedResponse | BadRequestResponse;

  @summary("Get Group by Id")
  @route("/api/v1/groups/{id}")
  @operationId("GetGroupbyId")
  @get read(@path id: string): Group | NotFoundResponse;

  @summary("Update Group")
  @route("/api/v1/groups/{id}")
  @operationId("UpdateGroup")
  @put put(@path id: string, @body group: Group): CreatedResponse | NoContentResponse | BadRequestResponse;

  @summary("Delete Group")
  @route("/api/v1/groups/{id}")
  @operationId("DeleteGroup")
  @doc("""
  We have the recursive boolean here set to false by default,
  following https://learn.microsoft.com/en-us/rest/api/managementgroups/management-groups/delete?tabs=HTTP.
  If a parent group contains subgroups, the request will fail by default.
  """)
  @delete delete(@path id: string): NoContentResponse;

  @summary("Upload Group")
  @route("/api/v1/groups/upload")
  @operationId("UploadGroup")
  @post upload(@body group:Group[]): CreatedResponse | BadRequestResponse;
}

@tag("Namespaces")
interface Namespaces {
  @summary("Get all Namespaces")
  @route("/api/v1/namespaces")
  @operationId("GetNamespaces")
  @get list(): Namespace[];

  @summary("Create Namespace")
  @route("/api/v1/namespaces")
  @operationId("CreateNamespace")
  @post create(@body ns: Namespace): CreatedResponse | BadRequestResponse;

  @summary("Get Namespace by Id")
  @route("/api/v1/namespaces/{id}")
  @operationId("GetNamespaceById")
  @get read(@path id: string): Namespace | NotFoundResponse;

  @summary("Update Namespace")
  @route("/api/v1/namespaces/{id}")
  @operationId("UpdateNamespace")
  @put put(@path id: string, @body ns: Namespace): CreatedResponse | NoContentResponse | BadRequestResponse;

  @summary("Delete Namespace")
  @route("/api/v1/namespaces/{id}")
  @operationId("DeleteNamespace")
  @delete delete(@path id: string): NoContentResponse;
}

@tag("Applications")
interface Applications {
  @summary("Get all Applications")
  @route("/api/v1/applications")
  @operationId("GetApplications")
  @get list(): Application[];

  @summary("Create Application")
  @route("/api/v1/applications")
  @operationId("CreateApplication")
  @post create(@body application: Application): CreatedResponse | BadRequestResponse;

  @summary("Get application by Id")
  @route("/api/v1/applications/{id}")
  @operationId("GetApplicationById")
  @get read(@path id: string): Application | NotFoundResponse;

  @summary("Update Application")
  @route("/api/v1/applications/{id}")
  @operationId("UpdateApplication")
  @put put(@path id: string, @body application: Application): CreatedResponse | NoContentResponse | BadRequestResponse;

  @summary("Delete Application")
  @route("/api/v1/applications/{id}")
  @operationId("DeleteApplication")
  @delete delete(@path id: string): NoContentResponse;
}

@tag("Policies")
interface Policies {
  @summary("Get all policies")
  @route("/api/v1/policies")
  @operationId("GetPolicies")
  @get list(): Policy[];

  @summary("Get policy by Id")
  @route("/api/v1/policies/{id}")
  @operationId("GetPolicyById")
  @get read(@path id: string): Policy | NotFoundResponse;
}

@summary("Kubernetes Endpoints")
@tag("Kubernetes Endpoints")
@extension("x-noGenerate", "true")
interface KubernetesEndpoints {
  @route("/healthz")
  @summary("Healthz Endpoint")
  @operationId("healthz")
  @get
  healthz(): string;

  @route("/readyz")
  @summary("Readyz Endpoint")
  @operationId("readyz")
  @get
  readyz(): string;

  @route("/version")
  @summary("Version Endpoint")
  @operationId("version")
  @get
  version(): string;

  @route("/metrics")
  @summary("Prometheus Metrics")
  @operationId("metrics")
  @get
  metrics(): string;
}
